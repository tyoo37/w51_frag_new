{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a35b934d-3480-4275-a8ce-88aac68e3707",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import Paths.Paths as paths\n",
    "\n",
    "from dendrocat import RadioSource\n",
    "from astropy.io import fits\n",
    "from spectral_cube import SpectralCube\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import LogNorm\n",
    "import numpy as np\n",
    "import sys\n",
    "import importlib\n",
    "from astropy.wcs import WCS\n",
    "from regions import Regions, PixCoord\n",
    "from astropy import stats\n",
    "from itertools import chain\n",
    "import dendrocat\n",
    "Path = paths.filepaths()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84bb53dc",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "699956dd-45cb-4dad-98c6-98a387e90a84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " b3_id     b6_id   b3_xpix ...       alphaerr       group        temp       \n",
      "                           ...                                              \n",
      "-------- --------- ------- ... -------------------- ----- ------------------\n",
      "93030993 226003591  7566.0 ...  0.08655649961254532   0.0 16.650242439499028\n",
      "93031160 226003728  7543.0 ...  0.07805916289287036   0.0                 --\n",
      "93031210 226003758  7501.0 ...  0.04057097146425142   0.0                 --\n",
      "93031450 226003857  7496.0 ...  0.09157797184318602   0.0 18.807939576189554\n",
      "93033120 226004857  7603.0 ... 0.025168989200307825   0.0  53.20947613648212\n",
      "93033295 226004920  7436.0 ...  0.09607887578373493   0.0  11.59703939803148\n",
      "93033484 226004956  7423.0 ...  0.11360124939175423   0.0                 --\n",
      "93034136 226005138  8088.0 ...  0.07695990638959421   2.0                 --\n",
      "93034470 226005314  7548.0 ...   0.0165058962334504   0.0  58.01322050406531\n",
      "93034661 226005339  7488.0 ... 0.024780668380578064   0.0                 --\n",
      "     ...       ...     ... ...                  ...   ...                ...\n",
      "93019416        --  9845.0 ...                   --  -1.0                 --\n",
      "93023750        -- 10393.0 ...                   --  -1.0                 --\n",
      "93027831        -- 12290.0 ...                   --  -1.0                 --\n",
      "93036918        --  3790.0 ...                   --  -1.0                 --\n",
      "93060982        --  8710.0 ...                   --  -1.0                 --\n",
      "93061125        --  8786.0 ...                   --  -1.0                 --\n",
      "93065169        --  8792.0 ...                   --  -1.0                 --\n",
      "93065171        -- 10762.0 ...                   --  -1.0                 --\n",
      "93065539        --  8532.0 ...                   --  -1.0                 --\n",
      "93066706        --  9192.0 ...                   --  -1.0                 --\n",
      "Length = 125 rows\n",
      "total core number =  41\n",
      "/orange/adamginsburg/w51/TaehwaYoo/2017.1.00293.S_W51_B3_LB/may2021_successful_imaging/w51e2.spw0thru19.14500.robust0.thr0.075mJy.mfs.I.startmod.selfcal7.image.tt0.pbcor.fits\n",
      "robust B3 measurement before applying FoV criteria =  20\n",
      "robust B3 measurement after applying FoV criteria =  20\n",
      "total core number =  41\n",
      "/orange/adamginsburg/w51/TaehwaYoo/w51e_b6_imaging_2025/w51e2.spw0thru19.14500.robust0.thr0.1mJy.mfs.I.startmod.selfcal7.image.tt0.pbcor.fits\n",
      "robust B3 measurement before applying FoV criteria =  20\n",
      "robust B3 measurement after applying FoV criteria =  13\n",
      "total core number =  127\n",
      "/orange/adamginsburg/w51/TaehwaYoo/2017.1.00293.S_W51_B3_LB/may2021_successful_imaging/w51n.spw0thru19.14500.robust0.thr0.075mJy.mfs.I.startmod.selfcal7.image.tt0.pbcor.fits\n",
      "robust B3 measurement before applying FoV criteria =  99\n",
      "robust B3 measurement after applying FoV criteria =  87\n",
      "total core number =  127\n",
      "/orange/adamginsburg/w51/TaehwaYoo/w51n_b6_imaging_2025/w51n.spw0thru19.14500.robust0.thr0.1mJy.mfs.I.startmod.selfcal7.image.tt0.pbcor.fits\n",
      "robust B3 measurement before applying FoV criteria =  99\n",
      "robust B3 measurement after applying FoV criteria =  27\n",
      "totalind [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n",
      "0 [36, 37] 2\n",
      "1 [29, 30, 31, 74, 93] 5\n",
      "2 [47, 51, 52, 53, 54, 82] 6\n",
      "3 [117] 1\n",
      "4 [34, 102] 2\n",
      "5 [1, 2, 3, 84] 4\n",
      "6 [48, 50, 81] 3\n",
      "7 [41, 42] 2\n",
      "8 [19, 20, 21, 71, 72] 5\n",
      "9 [67, 68, 119, 120] 4\n",
      "10 [59] 1\n",
      "11 [114] 1\n",
      "12 [115] 1\n",
      "13 [] 0\n",
      "14 [32] 1\n",
      "15 [] 0\n",
      "16 [] 0\n",
      "17 [63] 1\n",
      "18 [] 0\n",
      "19 [] 0\n",
      "cores with/without YSOs  15 5\n",
      "YSOs associated with cores 39  out of  125\n",
      "pre,pro [13, 15, 16, 18, 19] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 17]\n",
      "totalind [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
      " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
      " 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n",
      " 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86]\n",
      "0 [11, 13, 25, 26, 37, 39] 6\n",
      "1 [10] 1\n",
      "2 [56, 57] 2\n",
      "3 [17, 20, 21, 27, 40] 5\n",
      "4 [5, 7, 14] 3\n",
      "5 [84] 1\n",
      "6 [54] 1\n",
      "7 [61, 63] 2\n",
      "8 [] 0\n",
      "9 [83] 1\n",
      "10 [44] 1\n",
      "11 [47, 48, 49] 3\n",
      "12 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "13 [] 0\n",
      "14 [85] 1\n",
      "15 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "16 [] 0\n",
      "17 [89, 90] 2\n",
      "18 [28] 1\n",
      "19 [0] 1\n",
      "20 [] 0\n",
      "21 [] 0\n",
      "22 [] 0\n",
      "23 [53] 1\n",
      "24 [46] 1\n",
      "25 [79] 1\n",
      "26 [74] 1\n",
      "27 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 79, 80, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93] 85\n",
      "28 [] 0\n",
      "29 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "30 [] 0\n",
      "31 [8, 12] 2\n",
      "32 [3, 34] 2\n",
      "33 [64] 1\n",
      "34 [] 0\n",
      "35 [] 0\n",
      "36 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "37 [86] 1\n",
      "38 [] 0\n",
      "39 [62] 1\n",
      "40 [50] 1\n",
      "41 [31] 1\n",
      "42 [] 0\n",
      "43 [43] 1\n",
      "44 [52] 1\n",
      "45 [] 0\n",
      "46 [58] 1\n",
      "47 [] 0\n",
      "48 [22] 1\n",
      "49 [23] 1\n",
      "50 [81] 1\n",
      "51 [75] 1\n",
      "52 [1] 1\n",
      "53 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "54 [87] 1\n",
      "55 [] 0\n",
      "56 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 79\n",
      "57 [45] 1\n",
      "58 [] 0\n",
      "59 [] 0\n",
      "60 [80] 1\n",
      "61 [] 0\n",
      "62 [] 0\n",
      "63 [] 0\n",
      "64 [] 0\n",
      "65 [82] 1\n",
      "66 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "67 [] 0\n",
      "68 [] 0\n",
      "69 [] 0\n",
      "70 [24] 1\n",
      "71 [] 0\n",
      "72 [23, 31, 65, 67] 4\n",
      "73 [] 0\n",
      "74 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 83, 84, 86, 88, 89, 90, 91, 92, 93] 87\n",
      "75 [] 0\n",
      "76 [] 0\n",
      "77 [] 0\n",
      "78 [] 0\n",
      "79 [] 0\n",
      "80 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93] 94\n",
      "81 [] 0\n",
      "82 [] 0\n",
      "83 [0, 1, 2, 4, 5, 6, 23, 24, 31, 32, 33, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65] 32\n",
      "84 [] 0\n",
      "85 [] 0\n",
      "86 [] 0\n",
      "cores with/without YSOs  51 36\n",
      "YSOs associated with cores 94  out of  94\n",
      "pre,pro [8, 13, 16, 20, 21, 22, 28, 30, 34, 35, 38, 42, 45, 47, 55, 58, 59, 61, 62, 63, 64, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86] [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 23, 24, 25, 26, 27, 29, 31, 32, 33, 36, 37, 39, 40, 41, 43, 44, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 65, 66, 70, 72, 74, 80, 83]\n",
      "ho 7 1\n",
      "[36, 37, 29, 30, 31, 74, 93] [[36, 37]]\n",
      "22 1\n",
      "[11, 13, 25, 26, 37, 39, 10, 56, 57, 17, 20, 21, 27, 40, 5, 7, 14, 47, 48, 49, 0, 75] [[11, 13, 25, 26, 37, 39]]\n",
      "125 125\n",
      "group\n",
      "-----\n",
      "  0.0\n",
      "  0.0\n",
      "  0.0\n",
      "  0.0\n",
      "  0.0\n",
      "  0.0\n",
      "  0.0\n",
      "  2.0\n",
      "  0.0\n",
      "  0.0\n",
      "  ...\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      " -1.0\n",
      "Length = 125 rows\n",
      "hoho, [0.63133709 0.50506967] solMass\n",
      "       temp       \n",
      "------------------\n",
      "16.650242439499028\n",
      "                --\n",
      "                --\n",
      "18.807939576189554\n",
      " 53.20947613648212\n",
      " 11.59703939803148\n",
      "                --\n",
      "                --\n",
      " 58.01322050406531\n",
      "                --\n",
      "               ...\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "Length = 125 rows        temp       \n",
      "------------------\n",
      "26.260681156987186\n",
      "                --\n",
      "                --\n",
      "4.3836649916715675\n",
      "                --\n",
      " 50.12968091704702\n",
      " 33.94865927429359\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "               ...\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "                --\n",
      "Length = 94 rows\n",
      "[ 4.233409           nan         nan  1.39234043  3.72902094  4.00150005\n",
      "         nan         nan  5.92589659         nan         nan  3.40005605\n",
      "         nan         nan  4.33674952  3.68298831  5.15552943  4.13482953\n",
      "  1.56199347         nan         nan  9.24112719         nan  6.74779394\n",
      "  3.20995969 10.23950774  3.12101632         nan         nan  6.25464751\n",
      "         nan         nan 13.73091061  1.60899764         nan  3.15057269\n",
      "         nan         nan  3.81170366         nan         nan  3.42500537\n",
      "  3.29590665         nan  5.75936972  5.52420197         nan         nan\n",
      "  5.40315609  4.00444926  5.15555691         nan  3.53731576 14.55113766\n",
      "  7.09961478  6.01787697  5.81120801         nan  4.30800367  4.88452998\n",
      "  2.46512193  5.10737095         nan  2.37907749  5.43330816  0.85506685\n",
      "  6.46495495  3.34688602  4.02376705         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan] solMass [ 3.37779773         nan         nan  4.0963735          nan 11.48619993\n",
      " 10.11370302         nan         nan         nan         nan         nan\n",
      "  3.10232391         nan         nan         nan         nan  1.78090672\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan         nan         nan\n",
      "         nan         nan         nan         nan] solMass\n",
      "[1.60899764        nan 3.42500537] solMass\n",
      "[0.63298498 2.5493965  0.93655877] solMass\n",
      "[14.94552797] solMass\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1728x576 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "\n",
    "from astropy.table import Table\n",
    "import matplotlib as mpl\n",
    "import astropy.units as u\n",
    "import astropy.constants as c\n",
    "import seaborn as sns\n",
    "from radio_beam import Beam\n",
    "from astropy.io import ascii\n",
    "\n",
    "plt.rcParams['axes.labelsize']=25\n",
    "plt.rcParams['xtick.labelsize']=25\n",
    "plt.rcParams['ytick.labelsize']=25\n",
    "plt.rcParams['axes.titlesize']=25\n",
    "mpl.rcParams['axes.linewidth'] = 5\n",
    "mpl.rcParams['xtick.major.size'] = 10\n",
    "mpl.rcParams['xtick.major.width'] = 4\n",
    "mpl.rcParams['xtick.minor.size'] = 5\n",
    "mpl.rcParams['xtick.minor.width'] = 2\n",
    "mpl.rcParams['ytick.major.size'] = 10\n",
    "mpl.rcParams['ytick.major.width'] = 4\n",
    "mpl.rcParams['ytick.minor.size'] = 5\n",
    "mpl.rcParams['ytick.minor.width'] = 2\n",
    "params = {\"xtick.top\": True, \"ytick.right\": True, \"xtick.direction\": \"in\", \"ytick.direction\": \"in\"}\n",
    "plt.rcParams.update(params)\n",
    "class core_catdata():\n",
    "    def __init__(self,catfile, almaimf_beam,  start_coreno, hrfits=None,band='B3', recommend_criteria = 'b6', include_ff='no' ):\n",
    "        catdata_w51e = ascii.read(catfile,data_start=0,format='commented_header', header_start=120,  comment=\"!\")\n",
    "        geo_avg_beam = np.sqrt(almaimf_beam.major.to(u.arcsec).value*almaimf_beam.minor.to(u.arcsec).value)\n",
    "        corr_factor = catdata_w51e['AFWHM02'] * catdata_w51e['BFWHM02'] / catdata_w51e['AFWHM03'] / catdata_w51e['BFWHM03']\n",
    "        numcore_tot = len(catdata_w51e['AFWHM02'])\n",
    "        if include_ff=='all':\n",
    "            coreno_merged = start_coreno[0] + start_coreno[1]\n",
    "            print('coreno_merged',coreno_merged)\n",
    "            coreno_merged.sort()\n",
    "            coreno_start = coreno_merged\n",
    "            print('coreno_start',coreno_start)\n",
    "        elif include_ff=='ffonly':\n",
    "            coreno_start = start_coreno[1]\n",
    "        elif include_ff=='no':\n",
    "            coreno_start = start_coreno[0]\n",
    "        coreidx_start = [i for i in range(numcore_tot) if catdata_w51e['NO'][i] in coreno_start]\n",
    "        if recommend_criteria == 'b6b3':\n",
    "            coreidx = [idx for idx in coreidx_start if all([np.abs(catdata_w51e['GOODM02'][idx])>1,  \n",
    "                       np.abs(catdata_w51e['SIGNM02'][idx])>1,  \n",
    "                       catdata_w51e['FXP_BST02'][idx]/catdata_w51e['FXP_ERR02'][idx]>2, \n",
    "                       catdata_w51e['FXT_BST02'][idx]/catdata_w51e['FXT_ERR02'][idx]>2, \n",
    "                       catdata_w51e['AFWHM02'][idx]/catdata_w51e['BFWHM02'][idx]<2 ,\n",
    "                        catdata_w51e['FOOA02'][idx]/catdata_w51e['AFWHM02'][idx]>1.15 ,\n",
    "                        np.sqrt(catdata_w51e['AFWHM03'][idx]*catdata_w51e['BFWHM03'][idx]) <4 * geo_avg_beam  ,\n",
    "                        catdata_w51e['AFWHM03'][idx]/catdata_w51e['BFWHM03'][idx]<=2 ,\n",
    "                        np.abs(catdata_w51e['SIGNM03'][idx])>1 ,\n",
    "                        catdata_w51e['FXP_BST03'][idx]/catdata_w51e['FXP_ERR03'][idx]>1,  \n",
    "                        catdata_w51e['FXT_BST03'][idx]/catdata_w51e['FXT_ERR03'][idx]>1])]\n",
    "        elif recommend_criteria == 'b6':\n",
    "            coreidx = coreidx_start                  \n",
    "       \n",
    "        \n",
    "        if hrfits is not None:\n",
    "            yso_image = fits.open(hrfits)[0].data[0][0]\n",
    "            hrhdr = fits.open(hrfits)[0].header\n",
    "            inside_idx = exist_inside_FOV(catdata_w51e['WCS_ACOOR'], catdata_w51e['WCS_DCOOR'], yso_image, hrhdr)\n",
    "    \n",
    "            rec_ind = np.intersect1d(coreidx, inside_idx)\n",
    "        else:\n",
    "            rec_ind = coreidx\n",
    "        print('total core number = ', len(catdata_w51e['WCS_ACOOR']))\n",
    "        print(hrfits)\n",
    "        print('robust %s measurement before applying FoV criteria = '%band, len(coreidx))\n",
    "        print('robust %s measurement after applying FoV criteria = '%band, len(rec_ind))\n",
    "       \n",
    "        self.sky_ra = catdata_w51e['WCS_ACOOR'][rec_ind]\n",
    "        self.sky_dec = catdata_w51e['WCS_DCOOR'][rec_ind]\n",
    "        self.pix_x = catdata_w51e['XCO_P'][rec_ind]\n",
    "        self.pix_y = catdata_w51e['YCO_P'][rec_ind]\n",
    "        \n",
    "        if band=='B3':\n",
    "            bandind = 3\n",
    "        else:\n",
    "            bandind = 2\n",
    "\n",
    "        self.afwhm = catdata_w51e['AFWHM0%d'%bandind][rec_ind] #arcsec\n",
    "        self.bfwhm = catdata_w51e['BFWHM0%d'%bandind][rec_ind]\n",
    "\n",
    "        self.asize = catdata_w51e['ASIZE0%d'%bandind][rec_ind]\n",
    "        self.bsize = catdata_w51e['BSIZE0%d'%bandind][rec_ind]\n",
    "\n",
    "        self.theta = catdata_w51e['THETA0%d'%bandind][rec_ind]\n",
    "        \n",
    "        self.flux = catdata_w51e['FXT_BST0%d'%bandind][rec_ind]\n",
    "        self.fluxerr = catdata_w51e['FXT_ERR0%d'%bandind][rec_ind]\n",
    "        self.flux_g = catdata_w51e['FXT_ALT0%d'%bandind][rec_ind]\n",
    "\n",
    "        self.fooa = catdata_w51e['FOOA0%d'%bandind][rec_ind]\n",
    "        self.foob = catdata_w51e['FOOB0%d'%bandind][rec_ind]\n",
    "        \n",
    "        self.int_peak = catdata_w51e['FXP_BST0%d'%bandind][rec_ind]\n",
    "        self.interr_peak = catdata_w51e['FXP_ERR0%d'%bandind][rec_ind]\n",
    "        \n",
    "        self.size = (catdata_w51e['AFWHM0%d'%bandind][rec_ind]*catdata_w51e['BFWHM0%d'%bandind][rec_ind]**2)**(1/3) #arcsec\n",
    "\n",
    "\n",
    "        self.no = catdata_w51e['NO'][rec_ind]\n",
    "\n",
    "        \n",
    "        \n",
    "        rescaled_3mmflux = catdata_w51e['FXT_BST03'][rec_ind] * catdata_w51e['AFWHM02'][rec_ind] * catdata_w51e['BFWHM02'][rec_ind] / catdata_w51e['AFWHM03'][rec_ind]/catdata_w51e['BFWHM03'][rec_ind]\n",
    "        gamma = np.log10(catdata_w51e['FXT_BST02'][rec_ind] / rescaled_3mmflux)/np.log10(228.918/101.426)\n",
    "        self.woffind = np.where(gamma>2)[0]\n",
    "        self.wffind = np.where(gamma<2)[0]\n",
    "        self.rec_ind = rec_ind\n",
    "\n",
    "        \n",
    "    def get_temperature(self,tempfile,temp100ind = [], temp300ind =[]):\n",
    "        #temp100ind = hot cores with 100K\n",
    "        #temp300ind = hot cores with 300K\n",
    "\n",
    "        tab = ascii.read(tempfile, data_start=4)\n",
    "        id = tab['col1']\n",
    "        ra = tab['col2']\n",
    "        dec = tab['col3']\n",
    "        temp = tab['col4']\n",
    "\n",
    "        \"\"\"\n",
    "        for i in range(len(self.sky_ra)):\n",
    "            dist = np.sqrt((self.sky_ra[i]-ra)**2+(self.sky_dec[i]-dec)**2) #deg\n",
    "            mindist = np.min(dist)\n",
    "            if mindist<threshold:\n",
    "                index = np.argmin(dist)\n",
    "                temparr.append(temp[index])\n",
    "            else:\n",
    "                temparr.append(np.nan)\n",
    "        \"\"\"\n",
    "        temparr = np.array([temp[np.where(id==no)[0]][0] for no in self.no])\n",
    "        for i in range(len(temp100ind)):\n",
    "            if temp100ind[i] in self.no:\n",
    "                idx100 = np.where(self.no==temp100ind[i])[0]\n",
    "                print(idx100)\n",
    "                temparr[idx100] = 100\n",
    "                print('#%d core temp -->100K'%temp100ind[i])\n",
    "        for i in range(len(temp300ind)):\n",
    "            if temp300ind[i] in self.no:\n",
    "                idx300 = np.where(self.no==temp300ind[i])[0]\n",
    "                temparr[idx300] = 300\n",
    "                print('#%d core temp -->300K'%temp300ind[i])\n",
    "        self.temp = np.array(temparr)*u.K\n",
    "        \n",
    "        return self.temp\n",
    "    \n",
    "    def get_tau(self, freq, omega):\n",
    "        bb = models.BlackBody(temperature=self.temp)\n",
    "    \n",
    "        peak_int = (self.int_peak * u.Jy/u.beam).to(u.Jy/u.sr, equivalencies=u.beam_angular_area(omega))\n",
    "\n",
    "        return -np.log(1 - (peak_int/ bb(freq).to(u.Jy/u.sr)).to(u.cm/u.cm).value)\n",
    "    \n",
    "    def get_coremass(self, freq, kappa, dist,omega):\n",
    "            \n",
    "        print('self.temp',self.temp)\n",
    "        bb = models.BlackBody(temperature=self.temp)\n",
    "        peak_int = (self.int_peak * u.Jy/u.beam).to(u.Jy/ u.sr, equivalencies=u.beam_angular_area(omega))\n",
    "        print('peak_int',peak_int)\n",
    "        print('self.flux',self.flux)\n",
    "        print('kappa',kappa)\n",
    "        print(bb(freq).to(u.Jy/u.sr))\n",
    "        mass = - 1 / kappa * dist**2 * self.flux * u.Jy/ u.sr / peak_int * np.log(1 - (peak_int/ bb(freq).to(u.Jy/u.sr)).to(u.cm/u.cm).value)\n",
    "        print((peak_int/ bb(freq).to(u.Jy/u.sr)).to(u.cm/u.cm).value)\n",
    "        print(mass)\n",
    "        print('mass',mass.to(u.Msun))\n",
    "        self.mass = mass.to(u.Msun)\n",
    "        return mass.to(u.Msun)\n",
    "    \n",
    "    def get_coremasserr(self):\n",
    "        \n",
    "        masserr = np.abs(self.mass * np.sqrt((self.fluxerr/self.flux)**2+(self.interr_peak/self.int_peak)**2))\n",
    "        self.masserr = masserr\n",
    "        return masserr.to(u.Msun)\n",
    "                       \n",
    "    def get_Jeansmass(self, dist=5400):\n",
    "        rad = (self.afwhm.value*dist * self.bfwhm.value**2*dist**2)**(1/3) #arcsec -> au\n",
    "        rho = self.mass / (4/3*np.pi * (rad*u.au)**3)\n",
    "        c_s = np.sqrt(c.k_B*self.temp/2.8/c.m_p)\n",
    "        jeans_mass = np.pi**(5/2)/6/c.G**(3/2) * c_s.to(u.cm/u.s)**3 * rho.to(u.g/u.cm**3)**(-1/2)\n",
    "        \n",
    "        return jeans_mass.to(u.Msun)\n",
    "\n",
    "    def get_Jeansmasserr(self,dist=5400):\n",
    "        rad = (self.afwhm.value*dist * self.bfwhm.value**2*dist**2)**(1/3) #arcsec -> au\n",
    "        rho = self.mass / (4/3*np.pi * (rad*u.au)**3)\n",
    "        c_s = np.sqrt(c.k_B*self.temp/2.8/c.m_p)\n",
    "        jeans_mass = np.pi**(5/2)/6/c.G**(3/2) * c_s.to(u.cm/u.s)**3 * rho.to(u.g/u.cm**3)**(-1/2)\n",
    "        rho_err = self.masserr / (4/3*np.pi * (rad*u.au)**3)\n",
    "\n",
    "        jeans_mass_err = 0.5*jeans_mass * (rho_err/rho)\n",
    "\n",
    "        return jeans_mass_err.to(u.Msun)\n",
    "    def get_BE_mass(self, dist=5400):\n",
    "        rad = (self.afwhm.value*dist * self.bfwhm.value**2*dist**2)**(1/3)\n",
    "        rho = self.mass / (4/3*np.pi * (rad*u.au)**3)\n",
    "\n",
    "        BE_mass = 1.18 * np.sqrt((c.k_B*self.temp/2.33/c.m_p/c.G)**3/rho).to(u.Msun)\n",
    "        return BE_mass.to(u.Msun)\n",
    "    \n",
    "    def get_BE_masserr(self, dist=5400):\n",
    "        rad = (self.afwhm.value*dist * self.bfwhm.value**2*dist**2)**(1/3)\n",
    "        rho = self.mass / (4/3*np.pi * (rad*u.au)**3)\n",
    "\n",
    "        BE_mass = 1.18 * np.sqrt((c.k_B*self.temp/2.33/c.m_p/c.G)**3/rho).to(u.Msun)\n",
    "        rho_err = self.masserr / (4/3*np.pi * (rad*u.au)**3)\n",
    "\n",
    "        BE_mass_err = 0.5*BE_mass * (rho_err/rho)\n",
    "        return BE_mass_err.to(u.Msun)\n",
    "    \n",
    "    \n",
    "    def multiplicity(self, hdrhr, xysource, almaimf_beam=None,issky=True, label=None, aperture='fwhm+beam',limitarea=None,  maxrad=1e3, verbose=False):\n",
    "        ncat = len(self.no)\n",
    "        if limitarea is not None:\n",
    "            posind = np.where((sky_ra>limitarea[0])&(sky_ra<limitarea[1])&\n",
    "                              (sky_dec>limitarea[2])&(sky_dec<limitarea[3]))[0]\n",
    "        else:\n",
    "            posind = np.arange(ncat)\n",
    "        if label is None:\n",
    "            label=np.arange(ncat)\n",
    "        coreidx = np.arange(ncat)\n",
    "\n",
    "        totalind = np.intersect1d(posind, label)\n",
    "        print('totalind',totalind)\n",
    "        sky_ra = self.sky_ra[totalind]\n",
    "        sky_dec = self.sky_dec[totalind]\n",
    "        fooa = self.fooa[totalind]\n",
    "        foob = self.foob[totalind]\n",
    "        theta = self.theta[totalind]\n",
    "        no = self.no[totalind]\n",
    "        afwhm =self.afwhm[totalind]\n",
    "        bfwhm = self.bfwhm[totalind]\n",
    "\n",
    "        skypos = np.vstack((sky_ra,sky_dec)).T\n",
    "\n",
    "\n",
    "        wcshr = WCS(hdrhr,naxis=2)\n",
    "        scalehr = wcshr.proj_plane_pixel_scales()[0]\n",
    "\n",
    "        xypos_core = wcshr.wcs_world2pix(skypos,0)\n",
    "        xpos_core = xypos_core[:,0]\n",
    "        ypos_core = xypos_core[:,1]\n",
    "\n",
    "        if issky:\n",
    "            xysource_pix = wcshr.wcs_world2pix(xysource,0)\n",
    "        else:\n",
    "            xysource_pix = xysource\n",
    "        ysonumarr=[] ; coreindarr=[]; ysoindarr=[]\n",
    "        prestellar_ind = []\n",
    "        protostellar_ind = []\n",
    "        #print(xysource)\n",
    "        for i in range(len(xypos_core)):\n",
    "            if aperture is 'footprint':\n",
    "                major = fooa[i]/3600/scalehr.value\n",
    "                minor = foob[i]/3600/scalehr.value\n",
    "                pa = theta[i]+90\n",
    "            elif aperture is 'fwhm+beam':\n",
    "                meanbeamsize = (almaimf_beam.major.value+almaimf_beam.minor.value)/4\n",
    "                major = (afwhm[i]/3600+meanbeamsize)/scalehr.value\n",
    "                minor = (bfwhm[i]/3600+meanbeamsize)/scalehr.value\n",
    "                pa = theta[i]+90\n",
    "            elif aperture is 'beam':\n",
    "                major = almaimf_beam.major.value/scalehr.value\n",
    "                minor = almaimf_beam.minor.value/scalehr.value\n",
    "                pa = almaimf_beam.pa.value+90\n",
    "            #if major > maxrad:\n",
    "            #    continue\n",
    "\n",
    "            numsource, indsource = count_points_in_ellipse(xpos_core[i],ypos_core[i],major,minor,pa,xysource_pix[:,0],xysource_pix[:,1])\n",
    "            print(totalind[i], indsource, numsource)\n",
    "            ysonumarr.append(numsource)\n",
    "            coreindarr.append(totalind[i])\n",
    "            ysoindarr.append(indsource)\n",
    "            if numsource==0:\n",
    "                prestellar_ind.append(totalind[i])\n",
    "            elif numsource>0:\n",
    "                protostellar_ind.append(totalind[i])\n",
    "            \n",
    "            \n",
    "      \n",
    "        ysoindarr_flat = []\n",
    "        for arr in ysoindarr:\n",
    "            ysoindarr_flat.extend(arr)\n",
    "       \n",
    "        print('cores with/without YSOs ', len(np.where(np.array(ysonumarr)!=0)[0]), len(xpos_core)-len(np.where(np.array(ysonumarr)!=0)[0]))\n",
    "        print('YSOs associated with cores',len(np.unique(ysoindarr_flat)),' out of ',len(xysource_pix[:,0]))\n",
    "              \n",
    "        self.ysonumarr = ysonumarr\n",
    "        self.coreindarr = coreindarr\n",
    "        self.ysoindarr = ysoindarr\n",
    "        self.prestellar_ind = prestellar_ind\n",
    "        self.protostellar_ind = protostellar_ind\n",
    "        print('pre,pro',self.prestellar_ind, self.protostellar_ind)\n",
    "        return ysonumarr, coreindarr, ysoindarr, prestellar_ind, protostellar_ind\n",
    "def count_points_in_ellipse(xcen,ycen,major,minor,pa,xpos,ypos):\n",
    "    # caclulate foci positions \n",
    "    # must be full major, minor not semi major, minor\n",
    "    fodx = np.cos(pa)*np.sqrt((major/2)**2-(minor/2)**2)\n",
    "    fody = np.sin(pa)*np.sqrt((major/2)**2-(minor/2)**2)\n",
    "    \n",
    "    fox1 = xcen + fodx\n",
    "    foy1 = ycen + fody\n",
    "    \n",
    "    fox2 = xcen - fodx\n",
    "    foy2 = ycen - fody\n",
    "    \n",
    "    dist1 = np.sqrt((xpos-fox1)**2+(ypos-foy1)**2)\n",
    "    dist2 = np.sqrt((xpos-fox2)**2+(ypos-foy2)**2)\n",
    "    \n",
    "    isinside = np.where(dist1+dist2<major)[0]\n",
    "    \n",
    "    return len(isinside), list(isinside)\n",
    "\n",
    "\n",
    "\n",
    "def exist_inside_FOV(xcore_sky, ycore_sky, yso_image, hrhdr):\n",
    "    isfinite = np.where(np.isfinite(yso_image))\n",
    "    xfinite1 = np.min(isfinite[0])\n",
    "    xfinite2 = np.max(isfinite[0])\n",
    "    yfinite1 = np.min(isfinite[1])\n",
    "    yfinite2 = np.max(isfinite[1])\n",
    "     \n",
    "    xcen = (xfinite1 + xfinite2)/2\n",
    "    ycen = (yfinite1 + yfinite2)/2\n",
    "\n",
    "    wcs_hr = WCS(hrhdr,naxis=2)\n",
    "    xypos = wcs_hr.wcs_world2pix(np.vstack((xcore_sky,ycore_sky)).T,0)\n",
    "    \n",
    "    rad = np.abs(xfinite2 - xcen)\n",
    "    \n",
    "    \n",
    "    dist = np.sqrt((xypos[:,0]- xcen)**2+(xypos[:,1]-ycen)**2)\n",
    "    isinside = np.where(dist<rad)[0]\n",
    "    \n",
    "    return isinside        \n",
    "def kappa(nu, nu0=271.1*u.GHz, kappa0=0.0114*u.cm**2*u.g**-1, beta=1.75):\n",
    "    \"\"\"\n",
    "    Compute the opacity $\\kappa$ given a reference frequency (or wavelength)\n",
    "    and a power law governing the opacity as a fuction of frequency:\n",
    "    $$ \\kappa = \\kappa_0 \\left(\\\\frac{\\\\nu}{\\\\nu_0}\\\\right)^{\\\\beta} $$\n",
    "    The default kappa=0.0114 at 271.1 GHz comes from extrapolating the\n",
    "    Ossenkopf & Henning 1994 opacities for the thin-ice-mantle, 10^6 year model\n",
    "    anchored at 1.0 mm with an assumed beta of 1.75.\n",
    "    Parameters\n",
    "    ----------\n",
    "    nu: astropy.Quantity [u.spectral() equivalent]\n",
    "        The frequency at which to evaluate kappa\n",
    "    nu0: astropy.Quantity [u.spectral() equivalent]\n",
    "        The reference frequency at which $\\kappa$ is defined\n",
    "    kappa0: astropy.Quantity [cm^2/g]\n",
    "        The dust opacity per gram of H2 along the line of sight.  Because of\n",
    "        the H2 conversion, this factor implicitly includes a dust to gas ratio\n",
    "        (usually assumed 100)\n",
    "    beta: float\n",
    "        The power-law index governing kappa as a function of nu\n",
    "    \"\"\"\n",
    "    return (kappa0*(nu.to(u.GHz,u.spectral())/nu0.to(u.GHz,u.spectral()))**(beta)).to(u.cm**2/u.g)\n",
    "\n",
    "def get_mass(flux, kappa, freq, temp=40*u.K, dist=5.4*u.kpc, verbose=False):\n",
    "    BB = 2 *np.pi * c.h * freq**3 / (c.c**2) / (np.e**(c.h*freq/(c.k_B*temp)) - 1)\n",
    "    mass = flux.to(u.Jy) * dist**2 / BB.to(u.Jy) / kappa\n",
    "    \n",
    "    return mass.to(u.Msun)\n",
    "hdrB6_w51e_almaimf = fits.getheader(Path.w51e_b6_almaimf)  \n",
    "wcsB6_w51e_almaimf = WCS(hdrB6_w51e_almaimf,naxis=2)\n",
    "beamb6_w51e_almaimf = Beam.from_fits_header(hdrB6_w51e_almaimf)  \n",
    "\n",
    "hdrB3_w51e_almaimf = fits.getheader(Path.w51e_b3_almaimf)  \n",
    "wcsB3_w51e_almaimf = WCS(hdrB3_w51e_almaimf,naxis=2)\n",
    "beamb3_w51e_almaimf = Beam.from_fits_header(hdrB3_w51e_almaimf) \n",
    "\n",
    "hdrB6_w51n_almaimf = fits.getheader(Path.w51n_b6_almaimf)  \n",
    "wcsB6_w51n_almaimf = WCS(hdrB6_w51n_almaimf,naxis=2)\n",
    "beamb6_w51n_almaimf = Beam.from_fits_header(hdrB6_w51n_almaimf)  \n",
    "\n",
    "hdrB3_w51n_almaimf = fits.getheader(Path.w51n_b3_almaimf)  \n",
    "wcsB3_w51n_almaimf = WCS(hdrB3_w51n_almaimf,naxis=2)\n",
    "beamb3_w51n_almaimf = Beam.from_fits_header(hdrB3_w51n_almaimf)  \n",
    "\n",
    "hdrhr_w51n_b3= fits.getheader(Path.w51n_b3_tt0) \n",
    "hdrhr_w51e_b3= fits.getheader(Path.w51e_b3_tt0) \n",
    "hdrhr_w51n_b6= fits.getheader(Path.w51n_b6_tt0) \n",
    "hdrhr_w51e_b6= fits.getheader(Path.w51e_b6_tt0) \n",
    "\n",
    "catalog_w51e_yso = Table.read(Path.w51e_dendro_matched_catalog_new ,format='fits')\n",
    "print(catalog_w51e_yso)\n",
    "\n",
    "\n",
    "yso_w51e_xsky_b6 = catalog_w51e_yso['b6_xsky'] ; yso_w51e_ysky_b6 = catalog_w51e_yso['b6_ysky']\n",
    "yso_w51e_xsky_b3 = catalog_w51e_yso['b3_xsky'] ; yso_w51e_ysky_b3 = catalog_w51e_yso['b3_ysky']\n",
    "\n",
    "yso_detect_w51e_b6 = np.where(yso_w51e_xsky_b6>0)[0]\n",
    "yso_detect_w51e_b3 = np.where(yso_w51e_xsky_b3>0)[0]\n",
    "\n",
    "\n",
    "catalog_w51n_yso = Table.read(Path.w51n_dendro_matched_catalog_new ,format='fits')\n",
    "yso_w51n_xsky_b6 = catalog_w51n_yso['b6_xsky'] ; yso_w51n_ysky_b6 = catalog_w51n_yso['b6_ysky']\n",
    "yso_w51n_xsky_b3 = catalog_w51n_yso['b3_xsky'] ; yso_w51n_ysky_b3 = catalog_w51n_yso['b3_ysky']\n",
    "\n",
    "\n",
    "yso_xsky_w51e = []\n",
    "for i,x in enumerate(yso_w51e_xsky_b6):\n",
    "    if x > 0:\n",
    "        yso_xsky_w51e.append(x)\n",
    "    else:\n",
    "        yso_xsky_w51e.append(yso_w51e_xsky_b3[i])\n",
    "yso_ysky_w51e = []\n",
    "for i,x in enumerate(yso_w51e_ysky_b6):\n",
    "    if x > 0:\n",
    "        yso_ysky_w51e.append(x)\n",
    "    else:\n",
    "        yso_ysky_w51e.append(yso_w51e_ysky_b3[i])\n",
    "\n",
    "yso_xsky_w51n = []\n",
    "for i,x in enumerate(yso_w51n_xsky_b6):\n",
    "    if x > 0:\n",
    "        yso_xsky_w51n.append(x)\n",
    "    else:\n",
    "        yso_xsky_w51n.append(yso_w51n_xsky_b3[i])\n",
    "yso_ysky_w51n = []\n",
    "for i,x in enumerate(yso_w51n_ysky_b6):\n",
    "    if x > 0:\n",
    "        yso_ysky_w51n.append(x)\n",
    "    else:\n",
    "        yso_ysky_w51n.append(yso_w51n_ysky_b3[i])\n",
    "\n",
    "yso_xysource_w51e= np.vstack((yso_xsky_w51e, yso_ysky_w51e)).T\n",
    "yso_xysource_w51n= np.vstack((yso_xsky_w51n, yso_ysky_w51n)).T\n",
    "\n",
    "\n",
    "\n",
    "coreidx_w51e_fabien = [[2,4,8,11,12,13,14,15,16,17,19,21,22,26,28,29,33,34,38,39],[1,3,5,6,9,10,18,27]] #30, 31, 20 are discarded because they have duplicated pairs in IRS2\n",
    "coreidx_w51n_fabien = [[1,2,4,6,7,8,9,10,11,12,13,14,15,16,17,19,20,22,23,24,25,26,27,28,29,31,32,33,34,35,37,38,40,41,42,43,44,45,46,47,48,\n",
    "49,51,52,53,54,55,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,89,90,91,92,94,95,97,99,100,101,102,104,105,106,107,108,109,111,114,117,119,122,123],\n",
    "[3,5,18,36,56,58,98,113,118,124]]\n",
    "\n",
    "\n",
    "hot_cores_w51e = [2,4]\n",
    "hot_cores_w51n = [1,2,4,6,7,15,25,67 ]\n",
    "\n",
    "\n",
    "core_catdata_w51e_b3_b6crit_b3fov = core_catdata(Path.w51e_almaimf_catalog, beamb3_w51e_almaimf,coreidx_w51e_fabien, hrfits=Path.w51e_b3_tt0)\n",
    "core_catdata_w51e_b3_b6crit_b6fov = core_catdata(Path.w51e_almaimf_catalog, beamb3_w51e_almaimf, coreidx_w51e_fabien, hrfits=Path.w51e_b6_tt0)\n",
    "\n",
    "core_catdata_w51n_b3_b6crit_b3fov = core_catdata(Path.w51n_almaimf_catalog, beamb3_w51n_almaimf,coreidx_w51n_fabien,hrfits = Path.w51n_b3_tt0)\n",
    "core_catdata_w51n_b3_b6crit_b6fov = core_catdata(Path.w51n_almaimf_catalog, beamb3_w51n_almaimf,coreidx_w51n_fabien,hrfits =Path.w51n_b6_tt0)\n",
    "\n",
    "multiplicity_w51e_b6crit_b3fov = core_catdata_w51e_b3_b6crit_b3fov.multiplicity(hdrhr_w51e_b3,yso_xysource_w51e,\n",
    "                                 almaimf_beam = beamb6_w51e_almaimf)\n",
    "\n",
    "multiplicity_w51n_b6crit_b3fov = core_catdata_w51n_b3_b6crit_b3fov.multiplicity(hdrhr_w51n_b3,yso_xysource_w51n,\n",
    "                                 almaimf_beam = beamb6_w51n_almaimf,)\n",
    "\n",
    "ppoidx_w51e_hot_core_associated_100K = [multiplicity_w51e_b6crit_b3fov[2][i] for i in range(len(core_catdata_w51e_b3_b6crit_b3fov.no)) if core_catdata_w51e_b3_b6crit_b3fov.no[i] in hot_cores_w51e]\n",
    "ppoidx_w51n_hot_core_associated_100K = [multiplicity_w51n_b6crit_b3fov[2][i] for i in range(len(core_catdata_w51n_b3_b6crit_b3fov.no)) if core_catdata_w51n_b3_b6crit_b3fov.no[i] in hot_cores_w51n]\n",
    "\n",
    "ppoidx_w51e_hot_core_associated_300K = [multiplicity_w51e_b6crit_b3fov[2][i] for i in range(len(core_catdata_w51e_b3_b6crit_b3fov.no)) if core_catdata_w51e_b3_b6crit_b3fov.no[i] in [2]]\n",
    "ppoidx_w51n_hot_core_associated_300K = [multiplicity_w51n_b6crit_b3fov[2][i] for i in range(len(core_catdata_w51n_b3_b6crit_b3fov.no)) if core_catdata_w51n_b3_b6crit_b3fov.no[i] in [1]]\n",
    "\n",
    "\n",
    "def flatten(xss):\n",
    "    return [x for xs in xss for x in xs]\n",
    "ppoidx_w51e_hot_core_associated_100K = flatten(ppoidx_w51e_hot_core_associated_100K)\n",
    "ppoidx_w51n_hot_core_associated_100K = flatten(ppoidx_w51n_hot_core_associated_100K)\n",
    "fig = plt.figure(figsize=(24,8))\n",
    "ax1 = fig.add_axes([0.05,0.13,0.28,0.82])\n",
    "ax2 = fig.add_axes([0.37,0.13,0.28,0.82])\n",
    "ax3 = fig.add_axes([0.69,0.13,0.28,0.82])\n",
    "ax1.set_title('integrated flux', fontsize=30)\n",
    "ax2.set_title('constant temperature', fontsize=30)\n",
    "ax3.set_title('MBB temperature', fontsize=30)\n",
    "\n",
    "w51e_b3_flux_fits = Table.read(Path.w51e_b3_flux)\n",
    "w51e_b6_flux_fits = Table.read(Path.w51e_b6_flux)\n",
    "w51n_b3_flux_fits = Table.read(Path.w51n_b3_flux)\n",
    "w51n_b6_flux_fits = Table.read(Path.w51n_b6_flux)\n",
    "w51e_b3_int_flux = w51e_b3_flux_fits['flux']\n",
    "w51e_b6_int_flux = w51e_b6_flux_fits['flux']\n",
    "w51n_b3_int_flux = w51n_b3_flux_fits['flux']\n",
    "w51n_b6_int_flux = w51n_b6_flux_fits['flux']\n",
    "w51e_b3_int_flux_err = w51e_b3_flux_fits['flux_err']\n",
    "w51e_b6_int_flux_err = w51e_b6_flux_fits['flux_err']\n",
    "w51n_b3_int_flux_err = w51n_b3_flux_fits['flux_err']\n",
    "w51n_b6_int_flux_err = w51n_b6_flux_fits['flux_err']\n",
    "\n",
    "\n",
    "bins = np.logspace(-4,0,21)\n",
    "\n",
    "w51ecat = Table.read(Path.w51e_dendro_matched_catalog_new)\n",
    "w51ncat = Table.read(Path.w51n_dendro_matched_catalog_new)\n",
    "temp_w51e = w51ecat['temp']\n",
    "temp_w51n = w51ncat['temp']\n",
    "group_w51e = w51ecat['group']\n",
    "group_w51n = w51ncat['group']\n",
    "ind_constT_w51e = np.where(group_w51e<2)[0]\n",
    "ind_constT_w51n = np.where(group_w51n<2)[0]\n",
    "cmap = sns.color_palette(\"colorblind\")\n",
    "\n",
    "ax1.hist(w51e_b3_int_flux[ind_constT_w51e], bins=bins, facecolor='none',edgecolor=cmap[0], histtype='step',label='W51-E 3mm',lw=4,alpha=0.8)\n",
    "ax1.hist(w51e_b6_int_flux[ind_constT_w51e], bins=bins, color=cmap[-1],label='W51-E 1.3mm',lw=4,alpha=0.4)\n",
    "ax1.hist(w51n_b3_int_flux[ind_constT_w51n], bins=bins, facecolor='none',edgecolor=cmap[1], histtype='step',label='W51-IRS2 3mm',lw=4,alpha=0.8,hatch='/')\n",
    "ax1.hist(w51n_b6_int_flux[ind_constT_w51n], bins=bins, color=cmap[-2],label='W51-IRS2 1.3mm',lw=4,alpha=0.4)\n",
    "ax1.set_xlabel(r'$F_{\\rm int}$ (Jy)')\n",
    "ax1.set_ylabel('$dN/dlogM$')\n",
    "ax1.set_xscale('log')\n",
    "ax1.set_yscale('log')\n",
    "ax1.set_xlim(1e-5,1e-1)\n",
    "ax1.set_xticks([1e-4,1e-3,1e-2,1e-1,1e0])\n",
    "ax1.legend(fontsize=20,frameon=False,loc='upper right')\n",
    "\n",
    "massbins = np.logspace(-3,3,31)\n",
    "b3freq = 92982346121.91989*u.Hz\n",
    "b6freq = 226691598706.70853*u.Hz\n",
    "b3kappa = kappa(b3freq)\n",
    "b6kappa = kappa(b6freq)\n",
    "median_temp_w51e = np.ma.median(temp_w51e)\n",
    "\n",
    "median_temp_w51n = np.ma.median(temp_w51n)\n",
    "nanind_MBBT_w51e = np.where(~np.isfinite(temp_w51e))[0]\n",
    "nanind_MBBT_w51n = np.where(~np.isfinite(temp_w51n))[0]\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "w51e_temp_const = np.ones(len(w51e_b3_int_flux))*40*u.K\n",
    "w51n_temp_const = np.ones(len(w51n_b3_int_flux))*40*u.K\n",
    "print('ho',len(ppoidx_w51e_hot_core_associated_100K), len(ppoidx_w51e_hot_core_associated_300K))\n",
    "print(ppoidx_w51e_hot_core_associated_100K, ppoidx_w51e_hot_core_associated_300K)\n",
    "print(len(ppoidx_w51n_hot_core_associated_100K), len(ppoidx_w51n_hot_core_associated_300K))\n",
    "print(ppoidx_w51n_hot_core_associated_100K, ppoidx_w51n_hot_core_associated_300K)\n",
    "w51e_temp_const[ppoidx_w51e_hot_core_associated_100K] = 100*u.K\n",
    "w51e_temp_const[ppoidx_w51e_hot_core_associated_300K] = 300*u.K\n",
    "w51n_temp_const[ppoidx_w51n_hot_core_associated_100K] = 100*u.K\n",
    "w51n_temp_const[ppoidx_w51n_hot_core_associated_300K] = 300*u.K\n",
    "\n",
    "\n",
    "w51e_b3_mass = get_mass(w51e_b3_int_flux, b3kappa,  b3freq, temp=w51e_temp_const, verbose=True)\n",
    "w51e_b3_mass_err = get_mass(w51e_b3_int_flux_err, b3kappa,  b3freq, temp=w51e_temp_const)   \n",
    "\n",
    "w51e_b6_mass = get_mass(w51e_b6_int_flux, b6kappa,  b6freq, temp=w51e_temp_const)   \n",
    "w51n_b3_mass = get_mass(w51n_b3_int_flux, b3kappa,  b3freq, temp=w51n_temp_const)\n",
    "w51n_b3_mass_err = get_mass(w51n_b3_int_flux_err, b3kappa,  b3freq, temp=w51n_temp_const)   \n",
    "w51n_b6_mass = get_mass(w51n_b6_int_flux,  b6kappa, b6freq,temp=w51n_temp_const)\n",
    "\"\"\"\n",
    "w51e_b3_mass[nanind_MBBT_w51e] = np.nan\n",
    "w51e_b6_mass[nanind_MBBT_w51e] = np.nan\n",
    "w51n_b3_mass[nanind_MBBT_w51n] = np.nan\n",
    "w51n_b6_mass[nanind_MBBT_w51n] = np.nan\n",
    "w51e_b3_mass_upperr[nanind_MBBT_w51e] = np.nan\n",
    "w51n_b3_mass_upperr[nanind_MBBT_w51n] = np.nan\n",
    "w51e_b3_mass_lowerr[nanind_MBBT_w51e] = np.nan\n",
    "w51n_b3_mass_lowerr[nanind_MBBT_w51n] = np.nan\n",
    "\"\"\"\n",
    "print(len(w51e_b3_mass), len(group_w51e))\n",
    "print(group_w51e)\n",
    "ax2.hist(w51e_b3_mass.value[ind_constT_w51e], bins=massbins, facecolor='none',edgecolor=cmap[0], histtype='step',label='W51-E',lw=4,alpha=0.8)\n",
    "#ax2.hist(w51e_b6_mass.value[ind_w51e], bins=massbins, color='cyan',label='W51-E B6',lw=4,alpha=0.4)\n",
    "ax2.hist(w51n_b3_mass.value[ind_constT_w51n], bins=massbins, facecolor='none',edgecolor=cmap[1], histtype='step',label='W51-IRS2',lw=4,alpha=0.8,hatch='/')\n",
    "#ax2.hist(w51n_b6_mass.value[ind_w51n], bins=massbins, color='peru',label='W51-IRS2 B6',lw=4,alpha=0.4)\n",
    "#ax2.hist(np.append(w51n_b3_mass.value,w51e_b3_mass.value), bins=massbins, facecolor='none',edgecolor='k', histtype='step',label='total',lw=4,alpha=0.8,ls='dashed')\n",
    "ax2.legend(fontsize=20,frameon=False)\n",
    "w51e_b3_mass2 = get_mass(w51e_b3_int_flux, b3kappa,  b3freq,temp=temp_w51e*u.K)\n",
    "w51e_b3_mass2_err = get_mass(w51e_b3_int_flux_err, b3kappa,  b3freq, temp=temp_w51e*u.K)   \n",
    "\n",
    "\n",
    "w51e_b6_mass2 = get_mass(w51e_b6_int_flux, b6kappa,  b6freq,temp=temp_w51e*u.K)   \n",
    "w51n_b3_mass2 = get_mass(w51n_b3_int_flux, b3kappa,  b3freq,temp=temp_w51n*u.K)   \n",
    "w51n_b3_mass2_err = get_mass(w51n_b3_int_flux_err, b3kappa,  b3freq,temp=temp_w51n*u.K)   \n",
    "w51n_b6_mass2 = get_mass(w51n_b6_int_flux,  b6kappa, b6freq,temp=temp_w51n*u.K)\n",
    "print('hoho,', get_mass([0.25, 0.20]*u.mJy, b3kappa,  b3freq,temp=40*u.K))\n",
    "w51e_b3_mass2[nanind_MBBT_w51e] = np.nan\n",
    "w51e_b6_mass2[nanind_MBBT_w51e] = np.nan\n",
    "w51n_b3_mass2[nanind_MBBT_w51n] = np.nan\n",
    "w51n_b6_mass2[nanind_MBBT_w51n] = np.nan\n",
    "print(temp_w51e, temp_w51n)\n",
    "ax3.hist(w51e_b3_mass2.value[ind_constT_w51e], bins=massbins, facecolor='none',edgecolor=cmap[0], histtype='step',label='W51-E',lw=4,alpha=0.8)\n",
    "#ax3.hist(w51e_b6_mass2.value[ind_w51e], bins=massbins, color='cyan',label='W51-E B6',lw=4,alpha=0.4)\n",
    "ax3.hist(w51n_b3_mass2.value[ind_constT_w51n], bins=massbins, facecolor='none',edgecolor=cmap[1], histtype='step',label='W51-IRS2',lw=4,alpha=0.8,hatch='/')\n",
    "#ax3.hist(w51n_b6_mass2.value[ind_w51n], bins=massbins, color='peru',label='W51-IRS2 B6',lw=4,alpha=0.4)\n",
    "#ax3.hist(np.append(w51n_b3_mass2.value,w51e_b3_mass2.value), bins=massbins, facecolor='none',edgecolor='k', histtype='step',label='total',lw=4,alpha=0.8,ls='dashed')\n",
    "print(w51e_b3_mass2, w51n_b3_mass2)\n",
    "\n",
    "\n",
    "ax2.set_xscale('log')\n",
    "ax2.set_yscale('log')\n",
    "ax2.set_xlabel(r'$M_{\\rm YSO, constT}$ ($M_\\odot$)')\n",
    "#ax2.set_ylabel('YSO number')\n",
    "ax2.set_xticks([1e-2,1e-1,1e0,1e1,1e2])\n",
    "#ax2.legend(fontsize=20,frameon=False)\n",
    "ax1.set_ylim(0.8,40)\n",
    "ax2.set_ylim(0.8,40)\n",
    "ax3.set_ylim(0.8,40)\n",
    "ax1.set_xlim(5e-5,2e-1)\n",
    "ax3.set_xscale('log')\n",
    "ax3.set_yscale('log')\n",
    "ax3.set_xlabel(r'$M_{\\rm YSO, MBBT}$ ($M_\\odot$)')\n",
    "#ax3.set_ylabel('YSO number')\n",
    "ax3.set_xticks([1e-2,1e-1,1e0,1e1,1e2])\n",
    "ax2.set_xlim(1e-1,3e2)\n",
    "ax3.set_xlim(1e-1,3e2)\n",
    "#ax3.legend(fontsize=20,frameon=False)\n",
    "plt.savefig('flux_mass.png')\n",
    "idx = [33,40,41]\n",
    "print(w51e_b3_mass2[idx])\n",
    "print(w51e_b3_mass[idx])\n",
    "idx = [10]\n",
    "print(w51n_b3_mass[idx])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ca2e4e17-fb9d-4779-af89-7e5660a0e1b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "w51ecat['constT_mass'] = w51e_b3_mass\n",
    "w51ncat['constT_mass'] = w51n_b3_mass\n",
    "w51ecat['MBBT_mass'] = w51e_b3_mass2\n",
    "w51ncat['MBBT_mass'] = w51n_b3_mass2\n",
    "w51ecat['constT_mass_err'] = w51e_b3_mass_err\n",
    "w51ncat['constT_mass_err'] = w51n_b3_mass_err\n",
    "w51ecat['MBBT_mass_err'] = w51e_b3_mass2_err\n",
    "w51ncat['MBBT_mass_err'] = w51n_b3_mass2_err\n",
    "\n",
    "w51ecat['constT_mass'].fill_value = np.nan\n",
    "w51ncat['constT_mass'].fill_value = np.nan\n",
    "w51ecat['MBBT_mass'].fill_value = np.nan\n",
    "w51ncat['MBBT_mass'].fill_value = np.nan\n",
    "w51ecat['constT_mass_err'].fill_value = np.nan\n",
    "w51ncat['constT_mass_err'].fill_value = np.nan\n",
    "w51ecat['MBBT_mass_err'].fill_value = np.nan\n",
    "w51ncat['MBBT_mass_err'].fill_value = np.nan\n",
    "\n",
    "w51ecat.write(Path.w51e_dendro_matched_catalog_new, format='fits', overwrite=True)\n",
    "w51ncat.write(Path.w51n_dendro_matched_catalog_new, format='fits', overwrite=True)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4f68ab88-8a26-4593-bdae-e2860eeb0450",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 13>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m     radius_au \u001b[38;5;241m=\u001b[39m avg_size \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m180\u001b[39m \u001b[38;5;241m*\u001b[39m dist_kpc \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m1000\u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m206264.806\u001b[39m \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m2\u001b[39m\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m2.355\u001b[39m\n\u001b[1;32m     11\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m radius_au\n\u001b[0;32m---> 13\u001b[0m fig \u001b[38;5;241m=\u001b[39m \u001b[43mplt\u001b[49m\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m14\u001b[39m,\u001b[38;5;241m14\u001b[39m))\n\u001b[1;32m     14\u001b[0m ax1 \u001b[38;5;241m=\u001b[39m fig\u001b[38;5;241m.\u001b[39madd_axes([\u001b[38;5;241m0.1\u001b[39m,\u001b[38;5;241m0.1\u001b[39m,\u001b[38;5;241m0.3\u001b[39m,\u001b[38;5;241m0.3\u001b[39m])\n\u001b[1;32m     15\u001b[0m ax2 \u001b[38;5;241m=\u001b[39m fig\u001b[38;5;241m.\u001b[39madd_axes([\u001b[38;5;241m0.5\u001b[39m,\u001b[38;5;241m0.1\u001b[39m,\u001b[38;5;241m0.3\u001b[39m,\u001b[38;5;241m0.3\u001b[39m])\n",
      "\u001b[0;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "def get_radius(fitsfile, band='b6', index=None, dist_kpc = 5.41):\n",
    " \n",
    "    fits = Table.read(fitsfile)\n",
    "    major = fits['deconvolved_major_%s'%band]\n",
    "    minor = fits['deconvolved_minor_%s'%band]\n",
    "    if index is None:\n",
    "        index = np.arange(len(major))\n",
    "    \n",
    "    avg_size = np.sqrt(major * minor)[index]\n",
    "    radius_au = avg_size * np.pi/180 * dist_kpc *1000*206264.806 *2/2.355\n",
    "    return radius_au\n",
    "\n",
    "fig = plt.figure(figsize=(14,14))\n",
    "ax1 = fig.add_axes([0.1,0.1,0.3,0.3])\n",
    "ax2 = fig.add_axes([0.5,0.1,0.3,0.3])\n",
    "ax3 = fig.add_axes([0.1,0.5,0.3,0.3])\n",
    "ax4 = fig.add_axes([0.5,0.5,0.3,0.3])\n",
    "\n",
    "w51e_b6_rad = get_radius(w51e_dendro_matched_catalog_new)\n",
    "\n",
    "w51e_b3_rad = get_radius(w51e_dendro_matched_catalog_new,band='b3')\n",
    "\n",
    "w51n_b6_rad = get_radius(w51n_dendro_matched_catalog_new, dist_kpc=5.1)\n",
    "\n",
    "w51n_b3_rad = get_radius(w51n_dendro_matched_catalog_new,  band='b3', dist_kpc=5.1)\n",
    "\n",
    "ax1.scatter(w51e_b6_rad, w51e_b6_mass, c='b', s=10, label='B6')\n",
    "ax1.scatter(w51e_b3_rad, w51e_b3_mass, c='orange', s=10, label='B3')\n",
    "ax2.scatter(w51n_b6_rad, w51n_b6_mass, c='b', s=10, label='B6')\n",
    "ax2.scatter(w51n_b3_rad, w51n_b3_mass, c='orange', s=10, label='B3')\n",
    "ax3.scatter(w51e_b6_rad, w51e_b6_mass2, c='b', s=10, label='B6')\n",
    "ax3.scatter(w51e_b3_rad, w51e_b3_mass2, c='orange', s=10, label='B3')\n",
    "ax4.scatter(w51n_b6_rad, w51n_b6_mass2, c='b', s=10, label='B6')\n",
    "ax4.scatter(w51n_b3_rad, w51n_b3_mass2, c='orange', s=10, label='B3')\n",
    "\n",
    "ax1.set_xlabel('rad (AU)')\n",
    "ax2.set_xlabel('rad (AU)')\n",
    "ax3.set_xlabel('rad (AU)')\n",
    "ax4.set_xlabel('rad (AU)')\n",
    "\n",
    "ax1.set_ylabel('mass using 50K (Msun)')\n",
    "ax2.set_ylabel('mass using 50K (Msun)')\n",
    "ax3.set_ylabel('mass from BB (Msun)')\n",
    "ax4.set_ylabel('mass from BB (Msun)')\n",
    "ax1.legend()\n",
    "ax2.legend()\n",
    "ax3.legend()\n",
    "ax4.legend()\n",
    "ax1.set_xlim(0,600)\n",
    "ax2.set_xlim(0,600)\n",
    "ax3.set_xlim(0,600)\n",
    "ax4.set_xlim(0,600)\n",
    "ax1.set_yscale('log')\n",
    "ax2.set_yscale('log')\n",
    "ax3.set_yscale('log')\n",
    "ax4.set_yscale('log')\n",
    "\n",
    "ax1.set_ylim(1e-3,1e2)\n",
    "ax2.set_ylim(1e-3,1e2)\n",
    "ax3.set_ylim(1e-3,1e2)\n",
    "ax4.set_ylim(1e-3,1e2)\n",
    "\n",
    "ax1.set_title('W51-E')\n",
    "ax2.set_title('W51-IRS2')\n",
    "ax3.set_title('W51-E')\n",
    "ax4.set_title('W51-IRS2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec64fccb-5034-45df-9a16-f343b9ac50ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b70ac7a-36c2-4927-8e98-30dc278e0907",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
